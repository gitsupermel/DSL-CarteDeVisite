/*
 * generated by Xtext 2.30.0
 */
grammar InternalVcard;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.compil.dslvisitcard.dvc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.compil.dslvisitcard.dvc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.compil.dslvisitcard.dvc.services.VcardGrammarAccess;

}

@parser::members {

 	private VcardGrammarAccess grammarAccess;

    public InternalVcardParser(TokenStream input, VcardGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected VcardGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getCardsCardParserRuleCall_0());
			}
			lv_cards_0_0=ruleCard
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"cards",
					lv_cards_0_0,
					"org.compil.dslvisitcard.dvc.Vcard.Card");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleCard
entryRuleCard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCardRule()); }
	iv_ruleCard=ruleCard
	{ $current=$iv_ruleCard.current; }
	EOF;

// Rule Card
ruleCard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Card'
		{
			newLeafNode(otherlv_0, grammarAccess.getCardAccess().getCardKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCardAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='Name:'
		{
			newLeafNode(otherlv_2, grammarAccess.getCardAccess().getNameKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_STRING
				{
					newLeafNode(lv_name_3_0, grammarAccess.getCardAccess().getNameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCardRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='Title:'
		{
			newLeafNode(otherlv_4, grammarAccess.getCardAccess().getTitleKeyword_4());
		}
		(
			(
				lv_title_5_0=RULE_STRING
				{
					newLeafNode(lv_title_5_0, grammarAccess.getCardAccess().getTitleSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCardRule());
					}
					setWithLastConsumed(
						$current,
						"title",
						lv_title_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='Company:'
		{
			newLeafNode(otherlv_6, grammarAccess.getCardAccess().getCompanyKeyword_6());
		}
		(
			(
				lv_company_7_0=RULE_STRING
				{
					newLeafNode(lv_company_7_0, grammarAccess.getCardAccess().getCompanySTRINGTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCardRule());
					}
					setWithLastConsumed(
						$current,
						"company",
						lv_company_7_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_8='Email:'
		{
			newLeafNode(otherlv_8, grammarAccess.getCardAccess().getEmailKeyword_8());
		}
		(
			(
				lv_email_9_0=RULE_STRING
				{
					newLeafNode(lv_email_9_0, grammarAccess.getCardAccess().getEmailSTRINGTerminalRuleCall_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCardRule());
					}
					setWithLastConsumed(
						$current,
						"email",
						lv_email_9_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_10='Phone:'
		{
			newLeafNode(otherlv_10, grammarAccess.getCardAccess().getPhoneKeyword_10());
		}
		(
			(
				lv_phone_11_0=RULE_STRING
				{
					newLeafNode(lv_phone_11_0, grammarAccess.getCardAccess().getPhoneSTRINGTerminalRuleCall_11_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCardRule());
					}
					setWithLastConsumed(
						$current,
						"phone",
						lv_phone_11_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getCardAccess().getRightCurlyBracketKeyword_12());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
