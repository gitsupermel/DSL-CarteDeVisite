/*
 * generated by Xtext 2.30.0
 */
package org.compil.dslvisitcard.dvc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VcardGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.compil.dslvisitcard.dvc.Vcard.Model");
		private final Assignment cCardsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCardsCardParserRuleCall_0 = (RuleCall)cCardsAssignment.eContents().get(0);
		
		//Model:
		//    cards+=Card*;
		@Override public ParserRule getRule() { return rule; }
		
		//cards+=Card*
		public Assignment getCardsAssignment() { return cCardsAssignment; }
		
		//Card
		public RuleCall getCardsCardParserRuleCall_0() { return cCardsCardParserRuleCall_0; }
	}
	public class CardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.compil.dslvisitcard.dvc.Vcard.Card");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cTitleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTitleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTitleSTRINGTerminalRuleCall_5_0 = (RuleCall)cTitleAssignment_5.eContents().get(0);
		private final Keyword cCompanyKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCompanyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCompanySTRINGTerminalRuleCall_7_0 = (RuleCall)cCompanyAssignment_7.eContents().get(0);
		private final Keyword cEmailKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cEmailAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cEmailSTRINGTerminalRuleCall_9_0 = (RuleCall)cEmailAssignment_9.eContents().get(0);
		private final Keyword cPhoneKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cPhoneAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPhoneSTRINGTerminalRuleCall_11_0 = (RuleCall)cPhoneAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Card:
		//    'Card' '{'
		//        'Name:' name=STRING
		//        'Title:' title=STRING
		//        'Company:' company=STRING
		//        'Email:' email=STRING
		//        'Phone:' phone=STRING
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Card' '{'
		//    'Name:' name=STRING
		//    'Title:' title=STRING
		//    'Company:' company=STRING
		//    'Email:' email=STRING
		//    'Phone:' phone=STRING
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Card'
		public Keyword getCardKeyword_0() { return cCardKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'Name:'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//'Title:'
		public Keyword getTitleKeyword_4() { return cTitleKeyword_4; }
		
		//title=STRING
		public Assignment getTitleAssignment_5() { return cTitleAssignment_5; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_5_0() { return cTitleSTRINGTerminalRuleCall_5_0; }
		
		//'Company:'
		public Keyword getCompanyKeyword_6() { return cCompanyKeyword_6; }
		
		//company=STRING
		public Assignment getCompanyAssignment_7() { return cCompanyAssignment_7; }
		
		//STRING
		public RuleCall getCompanySTRINGTerminalRuleCall_7_0() { return cCompanySTRINGTerminalRuleCall_7_0; }
		
		//'Email:'
		public Keyword getEmailKeyword_8() { return cEmailKeyword_8; }
		
		//email=STRING
		public Assignment getEmailAssignment_9() { return cEmailAssignment_9; }
		
		//STRING
		public RuleCall getEmailSTRINGTerminalRuleCall_9_0() { return cEmailSTRINGTerminalRuleCall_9_0; }
		
		//'Phone:'
		public Keyword getPhoneKeyword_10() { return cPhoneKeyword_10; }
		
		//phone=STRING
		public Assignment getPhoneAssignment_11() { return cPhoneAssignment_11; }
		
		//STRING
		public RuleCall getPhoneSTRINGTerminalRuleCall_11_0() { return cPhoneSTRINGTerminalRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	
	
	private final ModelElements pModel;
	private final CardElements pCard;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VcardGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCard = new CardElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.compil.dslvisitcard.dvc.Vcard".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    cards+=Card*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Card:
	//    'Card' '{'
	//        'Name:' name=STRING
	//        'Title:' title=STRING
	//        'Company:' company=STRING
	//        'Email:' email=STRING
	//        'Phone:' phone=STRING
	//    '}';
	public CardElements getCardAccess() {
		return pCard;
	}
	
	public ParserRule getCardRule() {
		return getCardAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
