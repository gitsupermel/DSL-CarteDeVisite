/*
 * generated by Xtext 2.30.0
 */
package org.compil.dslvisitcard.dvc.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.compil.dslvisitcard.dvc.services.VcardGrammarAccess;
import org.compil.dslvisitcard.dvc.vcard.Card;
import org.compil.dslvisitcard.dvc.vcard.Model;
import org.compil.dslvisitcard.dvc.vcard.VcardPackage;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class VcardSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private VcardGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == VcardPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case VcardPackage.CARD:
				sequence_Card(context, (Card) semanticObject); 
				return; 
			case VcardPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Card returns Card
	 *
	 * Constraint:
	 *     (name=STRING title=STRING company=STRING email=STRING phone=STRING)
	 * </pre>
	 */
	protected void sequence_Card(ISerializationContext context, Card semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VcardPackage.Literals.CARD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VcardPackage.Literals.CARD__NAME));
			if (transientValues.isValueTransient(semanticObject, VcardPackage.Literals.CARD__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VcardPackage.Literals.CARD__TITLE));
			if (transientValues.isValueTransient(semanticObject, VcardPackage.Literals.CARD__COMPANY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VcardPackage.Literals.CARD__COMPANY));
			if (transientValues.isValueTransient(semanticObject, VcardPackage.Literals.CARD__EMAIL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VcardPackage.Literals.CARD__EMAIL));
			if (transientValues.isValueTransient(semanticObject, VcardPackage.Literals.CARD__PHONE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VcardPackage.Literals.CARD__PHONE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCardAccess().getNameSTRINGTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCardAccess().getTitleSTRINGTerminalRuleCall_5_0(), semanticObject.getTitle());
		feeder.accept(grammarAccess.getCardAccess().getCompanySTRINGTerminalRuleCall_7_0(), semanticObject.getCompany());
		feeder.accept(grammarAccess.getCardAccess().getEmailSTRINGTerminalRuleCall_9_0(), semanticObject.getEmail());
		feeder.accept(grammarAccess.getCardAccess().getPhoneSTRINGTerminalRuleCall_11_0(), semanticObject.getPhone());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     cards+=Card+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
